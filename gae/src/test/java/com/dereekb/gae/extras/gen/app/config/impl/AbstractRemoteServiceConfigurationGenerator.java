package com.dereekb.gae.extras.gen.app.config.impl;

import java.util.List;
import java.util.Properties;

import com.dereekb.gae.extras.gen.app.config.app.AppConfiguration;
import com.dereekb.gae.extras.gen.app.config.app.services.remote.RemoteServiceConfiguration;
import com.dereekb.gae.extras.gen.utility.GenFile;
import com.dereekb.gae.extras.gen.utility.GenFolder;
import com.dereekb.gae.extras.gen.utility.impl.GenFolderImpl;
import com.dereekb.gae.extras.gen.utility.spring.SpringBeansXMLBuilder;

/**
 * {@link AbstractConfigurationFileGenerator} extension for files generated by
 * {@link RemoteServiceConfiguration} instances from the
 * {@link AppConfiguration}.
 * <p>
 * Can also generate sub-folders of content for each service, and will import
 * the generated files automatically where possible.
 *
 * @author dereekb
 *
 */
public abstract class AbstractRemoteServiceConfigurationGenerator extends AbstractConfigurationFileGenerator {

	private String resultsFolderName = "results";

	private boolean isSplitByService = true;
	private boolean makeImportFile = true;

	/**
	 * Whether or not to attempt to generate the subfolders.
	 * <p>
	 * If false, will skip attempting to produce the subfolders and imports.
	 */
	private boolean makeServiceSubFolders = false;

	public AbstractRemoteServiceConfigurationGenerator(AppConfiguration appConfig) {
		this(appConfig, null);
	}

	public AbstractRemoteServiceConfigurationGenerator(AppConfiguration appConfig, Properties outputProperties) {
		super(appConfig, outputProperties);
	}

	public String getResultsFolderName() {
		return this.resultsFolderName;
	}

	public void setResultsFolderName(String resultsFolderName) {
		if (resultsFolderName == null) {
			throw new IllegalArgumentException("resultsFolderName cannot be null.");
		}

		this.resultsFolderName = resultsFolderName;
	}

	public boolean isSplitByService() {
		return this.isSplitByService;
	}

	public void setSplitByService(boolean isSplitByService) {
		this.isSplitByService = isSplitByService;
	}

	public boolean isMakeImportFile() {
		return this.makeImportFile;
	}

	public void setMakeImportFile(boolean makeImportFile) {
		this.makeImportFile = makeImportFile;
	}

	public boolean isMakeServiceSubFolders() {
		return this.makeServiceSubFolders;
	}

	public void setMakeServiceSubFolders(boolean makeServiceSubFolders) {
		this.makeServiceSubFolders = makeServiceSubFolders;
	}

	// MARK: AbstractConfigurationFileGenerator
	@Override
	public GenFolderImpl generateConfigurations() {
		return this.makeModelClientConfigurations();
	}

	private final GenFolderImpl makeModelClientConfigurations() {
		return this.makeGeneratorForConfiguration().makeServiceConfigurations(this.getAppConfig().getRemoteServices());
	}

	public RemoteServiceClientConfigurationGenerator makeGeneratorForConfiguration() {
		if (this.isSplitByService) {
			return new SplitByRemoteServiceClientConfigurationGenerator();
		} else {
			return new TogetherRemoteServiceClientConfigurationGenerator();
		}
	}

	public final GenFolderImpl makeConfigurationsForService(RemoteServiceConfiguration service) {
		if (this.shouldMakeConfigurationForService(service)) {
			return this.makeServiceConfiguration(service);
		} else {
			return null;
		}
	}

	protected boolean shouldMakeConfigurationForService(RemoteServiceConfiguration service) {
		return true;
	}

	public GenFolderImpl makeServiceConfiguration(RemoteServiceConfiguration service) {
		GenFolderImpl folder = new GenFolderImpl(
		        service.getAppServiceConfigurationInfo().getAppServiceName().toLowerCase());
		this.makeServiceConfiguration(folder, service);
		return folder;
	}

	/**
	 * Override this if the implementation should make a folder of configuration
	 * per service.
	 */
	public void makeServiceConfiguration(GenFolderImpl serviceResultsFolder,
	                                     RemoteServiceConfiguration service) {
		List<GenFolder> subFolders = null;

		if (this.makeServiceSubFolders) {
			subFolders = this.makeSubFoldersForService(service);
		}

		GenFile file = this.makeServiceConfigurationFile(serviceResultsFolder, service, subFolders);
		serviceResultsFolder.addFile(file);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file that doesn't return XML.
	 */
	private final GenFile makeServiceConfigurationFile(GenFolderImpl serviceResultsFolder,
	                                                   RemoteServiceConfiguration service,
	                                                   List<GenFolder> subFolders)
	        throws UnsupportedOperationException {
		SpringBeansXMLBuilder builder = this.makeXMLServiceConfigurationFile(service);

		if (subFolders != null && subFolders.isEmpty() == false) {
			this.importSubFolders(serviceResultsFolder, builder, subFolders);
		}

		String fileName = service.getAppServiceConfigurationInfo().getAppServiceName().toLowerCase();
		return this.makeFileWithXML(fileName, builder);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file.
	 *
	 * @throws UnsupportedOperationException
	 *             thrown by default if not overridden.
	 */
	public SpringBeansXMLBuilder makeXMLServiceConfigurationFile(RemoteServiceConfiguration service)
	        throws UnsupportedOperationException {
		throw new UnsupportedOperationException("Override in subclass to use.");
	}

	// MARK: Sub Folders
	/**
	 * Returns a single folder containing generated sub-folder configurations.
	 * <p>
	 * This generated folder should not include any files, as they will be
	 * ignored.
	 * <p>
	 * The generated sub-folders are not required to include an import file.
	 *
	 * @param service
	 *            {@link RemoteServiceConfiguration}. Never {@code null}.
	 * @return {@link List}, or {@code null} if none generated.
	 */
	protected List<GenFolder> makeSubFoldersForService(RemoteServiceConfiguration service) {
		throw new UnsupportedOperationException("Override in subclass to use.");
	}

	private void importSubFolders(GenFolderImpl serviceResultsFolder,
	                              SpringBeansXMLBuilder builder,
	                              List<GenFolder> subFolders) {
		List<GenFolder> updatedSubFolders = this.generateImportFilesForFolders(subFolders);
		serviceResultsFolder.addFolders(updatedSubFolders);
		this.importFilesWithBuilder(builder, serviceResultsFolder, false, true);
	}

	// MARK: Generator
	public interface RemoteServiceClientConfigurationGenerator {

		public GenFolderImpl makeServiceConfigurations(List<RemoteServiceConfiguration> services);

	}

	public class SplitByRemoteServiceClientConfigurationGenerator
	        implements RemoteServiceClientConfigurationGenerator {

		@Override
		public GenFolderImpl makeServiceConfigurations(List<RemoteServiceConfiguration> services) {
			GenFolderImpl folder = new GenFolderImpl(
			        AbstractRemoteServiceConfigurationGenerator.this.resultsFolderName);

			for (RemoteServiceConfiguration service : services) {
				GenFolder serviceFolder = makeConfigurationsForService(service);

				if (serviceFolder != null) {
					folder.addFolder(serviceFolder);
				}
			}

			if (AbstractRemoteServiceConfigurationGenerator.this.makeImportFile) {
				GenFile importFile = makeImportFile(folder, true, true);
				folder.addFile(importFile);
			}

			return folder;
		}

	}

	public class TogetherRemoteServiceClientConfigurationGenerator
	        implements RemoteServiceClientConfigurationGenerator {

		@Override
		public GenFolderImpl makeServiceConfigurations(List<RemoteServiceConfiguration> services) {
			GenFolderImpl folder = new GenFolderImpl(
			        AbstractRemoteServiceConfigurationGenerator.this.resultsFolderName);

			for (RemoteServiceConfiguration service : services) {
				GenFolder serviceFolder = makeConfigurationsForService(service);

				if (serviceFolder != null) {
					folder.merge(serviceFolder);
				}
			}

			return folder;
		}

	}
}
