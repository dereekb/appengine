package com.dereekb.gae.server.event.model.notification;

import java.util.Date;

import com.dereekb.gae.server.datastore.models.keys.ModelKey;
import com.dereekb.gae.server.datastore.models.owner.OwnedDatabaseModel;
import com.dereekb.gae.server.datastore.objectify.ObjectifyModel;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.IgnoreSave;
import com.googlecode.objectify.annotation.Index;
import com.googlecode.objectify.condition.IfEmpty;
import com.googlecode.objectify.condition.IfFalse;
import com.googlecode.objectify.condition.IfNull;
import com.googlecode.objectify.condition.IfTrue;
import com.googlecode.objectify.condition.IfZero;

/**
 * Simple notification model that saves an event code and whether or not it has
 * been read yet.
 * <p>
 * Notifications are generally generated by the server.
 * 
 * @author dereekb
 *
 */
@Entity
public class Notification extends OwnedDatabaseModel
        implements ObjectifyModel<Notification> {

	private static final long serialVersionUID = 1L;

	/**
	 * Database identifier.
	 */
	@Id
	private Long identifier;

	/**
	 * Date/Time of the notification.
	 */
	@Index
	private Date date = new Date();

	/**
	 * Encoded {@link NotificationType}.
	 */
	@IgnoreSave({ IfNull.class, IfZero.class })
	private Integer type = 0;

	/**
	 * Whether or not the notification has been read.
	 * <p>
	 * Can query for unread notifications.
	 */
	@Index({ IfFalse.class })
	@IgnoreSave({ IfNull.class, IfTrue.class })
	private Boolean read = true;

	/**
	 * Code for this notification.
	 */
	@IgnoreSave({ IfNull.class, IfEmpty.class })
	private String code = null;

	/**
	 * Data for this notification. Is generally JSON.
	 */
	@IgnoreSave({ IfNull.class })
	private String data = null;

	public Long getIdentifier() {
		return this.identifier;
	}

	public void setIdentifier(Long identifier) {
		this.identifier = identifier;
	}

	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Integer getType() {
		return this.type;
	}

	public void setType(Integer type) {
		this.type = type;
	}

	public Boolean getRead() {
		return this.read;
	}

	public void setRead(Boolean read) {
		this.read = read;
	}

	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public String getData() {
		return this.data;
	}

	public void setData(String data) {
		this.data = data;
	}

	// Unique Model
	@Override
	public ModelKey getModelKey() {
		return ModelKey.safe(this.identifier);
	}

	@Override
	public void setModelKey(ModelKey key) {
		this.identifier = ModelKey.readIdentifier(key);
	}

	// Database Model
	@Override
	protected Object getDatabaseIdentifier() {
		return this.identifier;
	}

	// Objectify Model
	@Override
	public Key<Notification> getObjectifyKey() {
		return Key.create(Notification.class, this.identifier);
	}

	@Override
	public String toString() {
		return "Notification [identifier=" + this.identifier + ", date=" + this.date + ", type=" + this.type + ", read="
		        + this.read + ", code=" + this.code + ", data=" + this.data + "]";
	}

}
