package com.thevisitcompany.gae.deprecated.model.mod.publish.functions.factory;

import com.thevisitcompany.gae.deprecated.model.mod.publish.KeyedPublishableModel;
import com.thevisitcompany.gae.deprecated.model.mod.publish.functions.PublishFunction;
import com.thevisitcompany.gae.deprecated.model.mod.publish.functions.PublishPair;
import com.thevisitcompany.gae.deprecated.model.mod.publish.functions.filters.PublishImmediateCheckFilter;
import com.thevisitcompany.gae.deprecated.model.mod.publish.functions.filters.PublishRulesFilter;
import com.thevisitcompany.gae.deprecated.model.mod.publish.utility.PublishEditor;
import com.thevisitcompany.gae.utilities.function.staged.components.StagedFunctionStage;
import com.thevisitcompany.gae.utilities.function.staged.factory.AbstractFilteredStagedFunctionFactory;
import com.thevisitcompany.gae.utilities.function.staged.filter.StagedFunctionFiltersMap;

/**
 * Factory for creating a new PublishFunction.
 * 
 * PublishFunctions generated do not have a saveDelegate set, and have different FunctionHandlerFiltersMaps, etc.
 * 
 * @author dereekb
 * 
 * @param <T>
 */
public class PublishFunctionFactory<T extends KeyedPublishableModel<Long>> extends AbstractFilteredStagedFunctionFactory<PublishFunction<T>, T, PublishPair<T>> {

	private PublishEditor<T> editor;
	private PublishFunctionFactoryDelegate<T> factoryDelegate;

	/**
	 * Adds a special filter generated by the factory delegate that checks publishing rules and the allow immediate
	 * filter.
	 */
	protected void addSpecialFilters(StagedFunctionFiltersMap<T, PublishPair<T>> filtersMap) {
		super.addSpecialFilters(filtersMap);

		PublishRulesFilter<T> rulesFilter = factoryDelegate.makeRulesFilter();
		PublishImmediateCheckFilter<T> immediateFilter = factoryDelegate.makeImmediateCheckFilter();

		if (immediateFilter != null) {
			filtersMap.add(StagedFunctionStage.STARTED, immediateFilter);
		}

		if (rulesFilter != null) {
			filtersMap.add(StagedFunctionStage.STARTED, rulesFilter);
		}
	}

	public PublishFunctionFactoryDelegate<T> getFactoryDelegate() {
		return factoryDelegate;
	}

	public void setFactoryDelegate(PublishFunctionFactoryDelegate<T> factoryDelegate) {
		this.factoryDelegate = factoryDelegate;
	}

	@Override
	protected PublishFunction<T> newStagedFunction() {
		PublishFunction<T> function = new PublishFunction<T>();

		if (this.editor != null) {
			function.setEditor(editor);
		}

		return function;
	}

	public PublishEditor<T> getEditor() {
		return editor;
	}

	public void setEditor(PublishEditor<T> editor) {
		this.editor = editor;
	}

}
