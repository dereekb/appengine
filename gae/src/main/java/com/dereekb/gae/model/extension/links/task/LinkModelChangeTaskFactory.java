package com.dereekb.gae.model.extension.links.task;

import java.util.List;

import com.dereekb.gae.model.extension.iterate.IterateTaskInput;
import com.dereekb.gae.model.extension.links.system.modification.LinkModificationSystem;
import com.dereekb.gae.model.extension.links.system.modification.LinkModificationSystemInstance;
import com.dereekb.gae.model.extension.links.system.modification.LinkModificationSystemInstanceOptions;
import com.dereekb.gae.model.extension.links.system.modification.LinkModificationSystemRequest;
import com.dereekb.gae.model.extension.links.system.modification.utility.LinkModificationSystemUtility;
import com.dereekb.gae.server.datastore.models.UniqueModel;
import com.dereekb.gae.server.datastore.models.keys.accessor.ModelKeyListAccessor;
import com.dereekb.gae.utilities.factory.exception.FactoryMakeFailureException;
import com.dereekb.gae.utilities.task.Task;
import com.dereekb.gae.utilities.task.exception.FailedTaskException;
import com.dereekb.gae.web.taskqueue.model.extension.iterate.TaskQueueIterateTaskFactory;

/**
 * {@link TaskQueueIterateTaskFactory} implementation that facilitates link
 * changes.
 * 
 * @author dereekb
 *
 * @param <T>
 *            model type
 */
public class LinkModelChangeTaskFactory<T extends UniqueModel>
        implements TaskQueueIterateTaskFactory<T> {

	private LinkModificationSystem system;
	private LinkModelChangeTaskFactoryDelegate<T> delegate;

	private LinkModificationSystemInstanceOptions options;

	public LinkModelChangeTaskFactory(LinkModificationSystem system, LinkModelChangeTaskFactoryDelegate<T> delegate) {
		super();
		this.setSystem(system);
		this.setDelegate(delegate);
	}

	public LinkModelChangeTaskFactoryDelegate<T> getDelegate() {
		return this.delegate;
	}

	public void setDelegate(LinkModelChangeTaskFactoryDelegate<T> delegate) throws IllegalArgumentException {
		if (delegate == null) {
			throw new IllegalArgumentException("Delegate cannot be null.");
		}

		this.delegate = delegate;
	}

	public LinkModificationSystem getSystem() {
		return this.system;
	}

	public void setSystem(LinkModificationSystem system) throws IllegalArgumentException {
		if (system == null) {
			throw new IllegalArgumentException("LinkModificationSystem cannot be null.");
		}

		this.system = system;
	}

	public LinkModificationSystemInstanceOptions getOptions() {
		return this.options;
	}

	public void setOptions(LinkModificationSystemInstanceOptions options) {
		this.options = options;
	}

	// MARK: TaskQueueIterateTaskFactory
	@Override
	public Task<ModelKeyListAccessor<T>> makeTask(IterateTaskInput input) throws FactoryMakeFailureException {
		ModelLinkChangeTaskDelegate<T> taskDelegate = this.delegate.makeTaskDelegate(input);
		return new LinkModelChangeTask(input.getModelType(), taskDelegate);
	}

	/**
	 * {@link LinkModelChangeTask} delegate.
	 * 
	 * @author dereekb
	 *
	 */
	public interface ModelLinkChangeTaskDelegate<T> {

		/**
		 * Creates requests for the input {@link ModelKeyListAccessor}.
		 * 
		 * @param input {@link ModelKeyListAccessor}. Never {@code null}.
		 * @return {@link List}. Never {@code null}.
		 * @throws FailedTaskException
		 *             thrown if the requests cannot be made.
		 */
		public List<LinkModificationSystemRequest> makeRequestsForModels(ModelKeyListAccessor<T> input) throws FailedTaskException;

	}

	/**
	 * {@link Task} generated by {@link LinkModelChangeTaskFactory}.
	 * 
	 * @author dereekb
	 *
	 */
	protected class LinkModelChangeTask
	        implements Task<ModelKeyListAccessor<T>> {

		private final String modelType;
		private final ModelLinkChangeTaskDelegate<T> delegate;

		public LinkModelChangeTask(String modelType, ModelLinkChangeTaskDelegate<T> delegate) {
			super();
			this.modelType = modelType;
			this.delegate = delegate;
		}

		// MARK: Task
		@Override
		public void doTask(ModelKeyListAccessor<T> input) throws FailedTaskException {
			try {
				List<LinkModificationSystemRequest> requests = this.delegate.makeRequestsForModels(input);
				
				LinkModificationSystemInstance instance = LinkModelChangeTaskFactory.this.system.makeInstance(LinkModelChangeTaskFactory.this.options);
				
				LinkModificationSystemUtility.queueRequests(requests, instance);
				
				instance.applyChanges();
			} catch (FailedTaskException e) {
				throw e;
			} catch (RuntimeException e) {
				throw new FailedTaskException(e);
			}
		}

		@Override
		public String toString() {
			return "LinkModelChangeTask [modelType=" + this.modelType + ", delegate=" + this.delegate + "]";
		}

	}

	@Override
	public String toString() {
		return "LinkModelChangeTaskFactory [system=" + this.system + ", delegate=" + this.delegate + ", options="
		        + this.options + "]";
	}

}
