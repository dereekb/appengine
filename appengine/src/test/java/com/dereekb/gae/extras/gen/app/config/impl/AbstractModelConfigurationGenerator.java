package com.dereekb.gae.extras.gen.app.config.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.dereekb.gae.extras.gen.app.config.app.AppConfiguration;
import com.dereekb.gae.extras.gen.app.config.app.model.local.LocalModelConfiguration;
import com.dereekb.gae.extras.gen.app.config.app.model.local.LocalModelConfigurationGroup;
import com.dereekb.gae.extras.gen.app.config.app.model.remote.RemoteModelConfiguration;
import com.dereekb.gae.extras.gen.app.config.app.model.remote.RemoteModelConfigurationGroup;
import com.dereekb.gae.extras.gen.app.config.app.model.shared.AppModelConfiguration;
import com.dereekb.gae.extras.gen.app.config.app.model.shared.AppModelConfigurationGroup;
import com.dereekb.gae.extras.gen.utility.GenFile;
import com.dereekb.gae.extras.gen.utility.GenFolder;
import com.dereekb.gae.extras.gen.utility.impl.GenFolderImpl;
import com.dereekb.gae.extras.gen.utility.spring.SpringBeansXMLBuilder;
import com.dereekb.gae.utilities.collections.list.ListUtility;
import com.dereekb.gae.utilities.data.ValueUtility;

/**
 * {@link AbstractConfigurationFileGenerator} extension for files generated by
 * model.
 *
 * @author dereekb
 *
 */
public abstract class AbstractModelConfigurationGenerator extends AbstractConfigurationFileGenerator {

	private String resultsFolderName = "model";
	private String remoteModelResultsFolderName = "remote";
	private String localModelResultsFolderName = "local";

	private boolean splitByRemote = false;
	private boolean splitByModel = false;
	private boolean splitByGroup = false;
	private boolean ignoreLocal = false;
	private boolean ignoreRemote = true;

	private boolean makeImportFiles = true;


	public AbstractModelConfigurationGenerator(AbstractConfigurationFileGenerator generator) {
		super(generator);
	}

	public AbstractModelConfigurationGenerator(AppConfiguration appConfig) {
		this(appConfig, null);
	}

	public AbstractModelConfigurationGenerator(AppConfiguration appConfig, Properties outputProperties) {
		super(appConfig, outputProperties);
	}

	public String getResultsFolderName() {
		return this.resultsFolderName;
	}

	public void setResultsFolderName(String remoteResultsFolderName) {
		if (remoteResultsFolderName == null) {
			throw new IllegalArgumentException("remoteResultsFolderName cannot be null.");
		}

		this.resultsFolderName = remoteResultsFolderName;
	}

	public String getLocalModelResultsFolderName() {
		return this.localModelResultsFolderName;
	}

	public void setLocalModelResultsFolderName(String resultsFolderName) {
		if (resultsFolderName == null) {
			throw new IllegalArgumentException("resultsFolderName cannot be null.");
		}

		this.localModelResultsFolderName = resultsFolderName;
	}

	public String getRemoteModelResultsFolderName() {
		return this.remoteModelResultsFolderName;
	}

	public void setRemoteModelResultsFolderName(String remoteModelResultsFolderName) {
		if (remoteModelResultsFolderName == null) {
			throw new IllegalArgumentException("remoteModelResultsFolderName cannot be null.");
		}

		this.remoteModelResultsFolderName = remoteModelResultsFolderName;
	}

	public boolean isMakeImportFiles() {
		return this.makeImportFiles;
	}

	public void setMakeImportFiles(boolean makeImportFiles) {
		this.makeImportFiles = makeImportFiles;
	}

	public boolean isSplitByRemote() {
		return this.splitByRemote;
	}

	public void setSplitByRemote(boolean splitByRemote) {
		this.splitByRemote = splitByRemote;
	}

	public boolean isSplitByModel() {
		return this.splitByModel;
	}

	public void setSplitByModel(boolean splitByModel) {
		this.splitByModel = splitByModel;
	}

	public boolean isSplitByGroup() {
		return this.splitByGroup;
	}

	public void setSplitByGroup(boolean splitByGroup) {
		this.splitByGroup = splitByGroup;
	}

	public boolean isIgnoreLocal() {
		return this.ignoreLocal;
	}

	public void setIgnoreLocal(boolean ignoreLocal) {
		this.ignoreLocal = ignoreLocal;
	}

	public boolean isIgnoreRemote() {
		return this.ignoreRemote;
	}

	public void setIgnoreRemote(boolean ignoreRemote) {
		this.ignoreRemote = ignoreRemote;
	}

	// MARK: AbstractConfigurationFileGenerator
	@Override
	public GenFolderImpl generateConfigurations() {
		return this.makeModelClientConfigurations();
	}

	private final GenFolderImpl makeModelClientConfigurations() {
		return this.makeGeneratorForConfiguration().makeModelConfigurations(this.getAppConfig());
	}

	public ModelClientConfigurationGenerator makeGeneratorForConfiguration() {
		if (this.isSplitByGroup()) {
			return new SplitByGroupModelClientConfigurationGenerator();
		} else {
			return new TogetherModelClientConfigurationGenerator();
		}
	}

	// MARK: Models
	protected boolean shouldMakeModelConfiguration(AppModelConfiguration modelConfig) {
		return (modelConfig.isLocalModel()) ? !this.ignoreLocal : !this.ignoreRemote;
	}

	// MARK: Local
	public GenFolderImpl makeModelClientConfigurationsForModels(LocalModelConfigurationGroup group) {
		return this.makeModelClientConfigurationsForModels(group.getGroupName(), group.getModelConfigurations());
	}

	public GenFolderImpl makeModelClientConfigurationsForModels(String folderName,
	                                                            List<LocalModelConfiguration> modelConfigs) {
		GenFolderImpl folder = new GenFolderImpl(ValueUtility.defaultTo(folderName, "default"));
		List<GenFolder> results = this.makeModelClientConfigurationsForModels(modelConfigs);
		folder.addFolders(results);
		return folder;
	}

	public List<GenFolder> makeModelClientConfigurationsForModels(List<LocalModelConfiguration> modelConfigs) {
		List<GenFolder> results = new ArrayList<GenFolder>();

		for (LocalModelConfiguration modelConfig : modelConfigs) {
			if (this.shouldMakeLocalModelConfiguration(modelConfig)) {
				GenFolder result = this.makeModelClientConfiguration(modelConfig);
				results.add(result);
			}
		}

		return results;
	}

	protected boolean shouldMakeLocalModelConfiguration(LocalModelConfiguration modelConfig) {
		return !this.ignoreLocal;
	}

	public GenFolderImpl makeModelClientConfiguration(LocalModelConfiguration modelConfig) {
		GenFolderImpl folder = new GenFolderImpl(modelConfig.getModelType());
		this.makeModelClientConfiguration(folder, modelConfig);
		return folder;
	}

	/**
	 * Override this if the implementation should make a folder of configuration
	 * per model.
	 */
	public void makeModelClientConfiguration(GenFolderImpl modelResultsFolder,
	                                         LocalModelConfiguration modelConfig) {
		GenFile file = this.makeModelClientConfigurationFile(modelConfig);
		modelResultsFolder.addFile(file);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file that doesn't return XML.
	 */
	public GenFile makeModelClientConfigurationFile(LocalModelConfiguration modelConfig)
	        throws UnsupportedOperationException {
		SpringBeansXMLBuilder builder = this.makeXMLModelClientConfigurationFile(modelConfig);
		String fileName = modelConfig.getModelType().toLowerCase();
		return this.makeFileWithXML(fileName, builder);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file.
	 *
	 * @throws UnsupportedOperationException
	 *             thrown by default if not overridden.
	 */
	public SpringBeansXMLBuilder makeXMLModelClientConfigurationFile(LocalModelConfiguration modelConfig)
	        throws UnsupportedOperationException {
		throw new UnsupportedOperationException("Override in subclass to use.");
	}

	// MARK: Remote
	public GenFolderImpl makeModelClientConfigurationsForRemoteModels(RemoteModelConfigurationGroup group) {
		return this.makeModelClientConfigurationsForRemoteModels(group.getGroupName(), group.getModelConfigurations());
	}

	public GenFolderImpl makeModelClientConfigurationsForRemoteModels(String folderName,
	                                                                  List<RemoteModelConfiguration> modelConfigs) {
		GenFolderImpl folder = new GenFolderImpl(ValueUtility.defaultTo(folderName, "default"));
		List<GenFolder> results = this.makeModelClientConfigurationsForRemoteModels(modelConfigs);
		folder.addFolders(results);
		return folder;
	}

	public List<GenFolder> makeModelClientConfigurationsForRemoteModels(List<RemoteModelConfiguration> modelConfigs) {
		List<GenFolder> results = new ArrayList<GenFolder>();

		for (RemoteModelConfiguration modelConfig : modelConfigs) {
			if (this.shouldMakeRemoteModelConfiguration(modelConfig)) {
				GenFolder result = this.makeRemoteModelClientConfiguration(modelConfig);
				results.add(result);
			}
		}

		if (!this.splitByModel) {
			GenFolderImpl folder = new GenFolderImpl("merge");
			folder.merge(results);
			return ListUtility.wrap(folder);
		}

		return results;
	}

	protected boolean shouldMakeRemoteModelConfiguration(RemoteModelConfiguration modelConfig) {
		return !this.ignoreRemote;
	}

	public GenFolderImpl makeRemoteModelClientConfiguration(RemoteModelConfiguration modelConfig) {
		GenFolderImpl folder = new GenFolderImpl(modelConfig.getModelType());
		this.makeRemoteModelClientConfiguration(folder, modelConfig);
		return folder;
	}

	/**
	 * Override this if the implementation should make a folder of configuration
	 * per model.
	 */
	public void makeRemoteModelClientConfiguration(GenFolderImpl modelResultsFolder,
	                                               RemoteModelConfiguration modelConfig) {
		GenFile file = this.makeRemoteModelClientConfigurationFile(modelConfig);
		modelResultsFolder.addFile(file);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file that doesn't return XML.
	 */
	public GenFile makeRemoteModelClientConfigurationFile(RemoteModelConfiguration modelConfig)
	        throws UnsupportedOperationException {
		SpringBeansXMLBuilder builder = this.makeXMLRemoteModelClientConfigurationFile(modelConfig);
		String fileName = modelConfig.getModelType().toLowerCase();
		return this.makeFileWithXML(fileName, builder);
	}

	/**
	 * Override this for convenience if the implementation only creates a single
	 * file.
	 *
	 * @throws UnsupportedOperationException
	 *             thrown by default if not overridden.
	 */
	public SpringBeansXMLBuilder makeXMLRemoteModelClientConfigurationFile(RemoteModelConfiguration modelConfig)
	        throws UnsupportedOperationException {
		throw new UnsupportedOperationException("Override in subclass to use.");
	}

	// MARK: Folders
	public GenFile makeLocalFolderImportFile(GenFolder local) {
		return makeImportFile(local, true);
	}

	public GenFile makeRemoteFolderImportFile(GenFolder remote) {
		return makeImportFile(remote, true);
	}

	public GenFile makePrimaryFolderImportFile(GenFolder primary) {
		SpringBeansXMLBuilder builder = this.makePrimaryFolderImportFileBuilder(primary);
		return this.makeFileWithXML(primary.getFolderName(), builder);
	}

	/**
	 * Override this on the sub-class for easy additions to the primary file.
	 */
	public SpringBeansXMLBuilder makePrimaryFolderImportFileBuilder(GenFolder primary) {
		return this.makeImportFileBuilder(primary, true, true);
	}

	// MARK: Generator
	public interface ModelClientConfigurationGenerator {

		public GenFolderImpl makeModelConfigurations(AppConfiguration appConfig);

		public GenFolderImpl makeLocalModelConfigurations(List<LocalModelConfigurationGroup> groups);

		public GenFolderImpl makeRemoteModelConfigurations(List<RemoteModelConfigurationGroup> groups);

	}

	/**
	 * Abstract {@link ModelClientConfigurationGenerator} implementation.
	 *
	 * @author dereekb
	 *
	 */
	public abstract class AbstractModelClientConfigurationGenerator
	        implements ModelClientConfigurationGenerator {

		private boolean ignoreLocal = AbstractModelConfigurationGenerator.this.ignoreLocal;
		private boolean ignoreRemote = AbstractModelConfigurationGenerator.this.ignoreRemote;
		private boolean splitByModel = AbstractModelConfigurationGenerator.this.splitByModel;
		private boolean splitByRemote = AbstractModelConfigurationGenerator.this.splitByRemote;
		private boolean makeImportFiles = AbstractModelConfigurationGenerator.this.makeImportFiles;

		public boolean isIgnoreLocal() {
			return this.ignoreLocal;
		}

		public void setIgnoreLocal(boolean ignoreLocal) {
			this.ignoreLocal = ignoreLocal;
		}

		public boolean isIgnoreRemote() {
			return this.ignoreRemote;
		}

		public void setIgnoreRemote(boolean ignoreRemote) {
			this.ignoreRemote = ignoreRemote;
		}

		public boolean isSplitByModel() {
			return this.splitByModel;
		}

		public void setSplitByModel(boolean splitByModel) {
			this.splitByModel = splitByModel;
		}

		public boolean isSplitByRemote() {
			return this.splitByRemote;
		}

		public void setSplitByRemote(boolean splitByRemote) {
			this.splitByRemote = splitByRemote;
		}

		public boolean isMakeImportFiles() {
			return this.makeImportFiles;
		}

		public void setMakeImportFiles(boolean makeImportFiles) {
			this.makeImportFiles = makeImportFiles;
		}

		// MARK: ModelClientConfigurationGenerator
		@Override
		public GenFolderImpl makeModelConfigurations(AppConfiguration appConfig) {
			GenFolderImpl folder = new GenFolderImpl(AbstractModelConfigurationGenerator.this.resultsFolderName);

			GenFile importFile = null;

			GenFolderImpl local = null;
			GenFolderImpl remote = null;

			if (!this.ignoreLocal) {
				local = this.makeLocalModelConfigurations(appConfig.getLocalModelConfigurations());
			}

			if (!this.ignoreRemote) {
				remote = this.makeRemoteModelConfigurations(appConfig.getRemoteModelConfigurations());
			}

			if (this.splitByRemote) {
				folder.safeAddFolder(local);
				folder.safeAddFolder(remote);

				if (this.makeImportFiles) {
					if (local != null) {
						local.addFile(this.makeLocalFolderImportFile(local));
					}

					if (remote != null) {
						remote.addFile(this.makeRemoteFolderImportFile(remote));
					}

					importFile = makePrimaryFolderImportFile(folder);
				}
			} else {
				folder.safeMerge(local);
				folder.safeMerge(remote);

				if (this.makeImportFiles) {
					importFile = makePrimaryFolderImportFile(folder);
				}
			}

			folder.safeAddFile(importFile);

			return folder;
		}

		public GenFile makeLocalFolderImportFile(GenFolder local) {
			return AbstractModelConfigurationGenerator.this.makeLocalFolderImportFile(local);
		}

		public GenFile makeRemoteFolderImportFile(GenFolder local) {
			return AbstractModelConfigurationGenerator.this.makeRemoteFolderImportFile(local);
		}

		public GenFile makePrimaryFolderImportFile(GenFolder folder) {
			return AbstractModelConfigurationGenerator.this.makePrimaryFolderImportFile(folder);
		}

		public GenFolderImpl makeLocalModelConfigurationsForGroup(LocalModelConfigurationGroup group) {
			GenFolderImpl folder = makeModelClientConfigurationsForModels(group);

			if (!this.splitByModel) {
				folder.flatten();
			}

			return folder;
		}

		public GenFolderImpl makeRemoteModelConfigurationsForGroup(RemoteModelConfigurationGroup group) {
			GenFolderImpl folder = makeModelClientConfigurationsForRemoteModels(group);

			if (!this.splitByModel) {
				folder.flatten();
			}

			return folder;
		}

	}

	/**
	 * {@link ModelClientConfigurationGenerator} with each group put into their
	 * own folder.
	 *
	 * @author dereekb
	 *
	 */
	public class SplitByGroupModelClientConfigurationGenerator extends AbstractModelClientConfigurationGenerator {

		@Override
		public GenFolderImpl makeLocalModelConfigurations(List<LocalModelConfigurationGroup> groups) {
			GenFolderImpl folder = new GenFolderImpl(
			        AbstractModelConfigurationGenerator.this.localModelResultsFolderName);

			for (LocalModelConfigurationGroup groupConfig : groups) {
				folder.addFolder(this.makeLocalModelConfigurationsForGroup(groupConfig));
			}

			return folder;
		}

		@Override
		public GenFolderImpl makeRemoteModelConfigurations(List<RemoteModelConfigurationGroup> groups) {
			GenFolderImpl folder = new GenFolderImpl(
			        AbstractModelConfigurationGenerator.this.remoteModelResultsFolderName);

			for (RemoteModelConfigurationGroup groupConfig : groups) {
				folder.addFolder(this.makeRemoteModelConfigurationsForGroup(groupConfig));
			}

			return folder;
		}

	}

	/**
	 * {@link ModelClientConfigurationGenerator} with all groups together in a
	 * single folder.
	 *
	 * @author dereekb
	 *
	 */
	public class TogetherModelClientConfigurationGenerator extends SplitByGroupModelClientConfigurationGenerator
	        implements ModelClientConfigurationGenerator {

		@Override
		public GenFolderImpl makeLocalModelConfigurations(List<LocalModelConfigurationGroup> groups) {
			GenFolderImpl folder = super.makeLocalModelConfigurations(groups);
			folder.flatten();
			return folder;
		}

		@Override
		public GenFolderImpl makeRemoteModelConfigurations(List<RemoteModelConfigurationGroup> groups) {
			GenFolderImpl folder = super.makeRemoteModelConfigurations(groups);
			folder.flatten();
			return folder;
		}

	}

	// MARK: Utility
	protected List<AppModelConfiguration> getAllApplicableModelConfigurations() {
		return this.getAllApplicableModelConfigurations(this.getAppConfig().getModelConfigurations());
	}

	protected List<AppModelConfiguration> getAllApplicableModelConfigurations(List<? extends AppModelConfigurationGroup> list) {
		List<AppModelConfiguration> configs = new ArrayList<AppModelConfiguration>();

		for (AppModelConfigurationGroup groupConfig : list) {
			for (AppModelConfiguration modelConfig : groupConfig.getModelConfigurations()) {
				if (this.shouldMakeModelConfiguration(modelConfig)) {
					configs.add(modelConfig);
				}
			}
		}

		return configs;
	}

	protected List<LocalModelConfiguration> getAllLocalConfigurations() {
		return this.getAllLocalConfigurations(this.getAppConfig().getLocalModelConfigurations());
	}

	protected List<LocalModelConfiguration> getAllLocalConfigurations(List<LocalModelConfigurationGroup> groups) {
		List<LocalModelConfiguration> configs = new ArrayList<LocalModelConfiguration>();

		for (LocalModelConfigurationGroup groupConfig : groups) {
			for (LocalModelConfiguration modelConfig : groupConfig.getModelConfigurations()) {
				configs.add(modelConfig);
			}
		}

		return configs;
	}

}
